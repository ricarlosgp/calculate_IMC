/*CONFIGURAÇÕES BÁSICAS DO CSS */
* { /* zerando todas a margin e padding do navegador*/
    margin: 0;
    padding: 0;
    box-sizing: border-box; /*box-sizing: border-box é o estilo padrão que os navegadores usam para o <table>, <select>, e <button> elementos e para <input> elementos cujo tipo é radio, checkbox, reset, button, submit, color, ou search.
    box-sizing = dimensionamento de caixa
    border-box = caixa de borda*/ 
}

:root {/* :root = raiz e serve para declarar uma variável CSS global */
    font-size: 62.5%; /*tudo com valor PX posso converter em REM. Basta dividir por 10 que correponde aos 62.5%*/

    /* declarando variáveis para CORES. tt=texto, ot=outline , bd=bordas */
    --tt-heading:#0c3440; /* declarando uma variável chamad --tt-heading(cabeçalho) para estilizar */
    --tt-label:#00453A; /* label = etiqueta. Para as demais fontes que não seja o cabeçalho */
    --tt-input:#212529; /* para os textos do input */    
    --tt-placeholder: rgba(73, 80, 87, 0.5); /* texto do marcador de posições ou placeholder é o texto do input da Altura */
    --bg-input: #dce2e9;

    --bd-input: rgba(73, 80, 87, 0.3); /*para as cores das bordas do input*/
    --ot-input: #02799d; /*para as cores das linhas das bordas do input*/

    /*estilizando os botões e texto ao apresentar erro*/
    --tt-button: white; /*texto do botão*/
    --bg-button:#02799d; /*cor de fundo do botão*/ 
    --bg-button-hover:#01475c; 

    --bg-error: #f03e3e; /*cor de fundo do botão ao apresentar erro*/
    --tt-error: white;/*cor do texto do botão de erro*/

}

body {
    font-family: 'Roboto', sans-serif;
    background-color: #040924;
    
}

body, input, button {
    font-size: 1.6rem;
    line-height: 2rem;
}
/*---------------FIM-----------------------------------------*/

/*estilizando o container com tudo dentro*/

.container {/*esse container é todo meu bory(pagina azul e card*/
    height: 100vh; /* a altura do contair está de 100vh significa que todo o conteúdo irá até o final(altura) da pagína do navegador e para destravar usamos a propriedade place-content:center.*/
    place-content: center; /* após usar o height 100vh o place-content: center; permite alinhar o conteúdo ao longo das direções de bloco e em linha de uma só vez. Em resumo aqui estou centralizando todo o container no navegador mantendo intacto as configurações do .card abaixo.*/
    display: grid; /* todos os elementos contido no contairner(card, txto etc...) se comporta como um elemento de bloco ou coluna, um abaixo do outro e centralizado ou de acordo com o modelo de grade.*/
}

/* estilizando o card*/

.card {border: 1px solid rgb(106, 0, 255);
    
    padding: 4.8rem 6.4rem 6.4rem 6.4rem; /*top, right,bottom,left. Esse padding define a distância interna entre o conteúdo do card e suas bordas. Como o left e o rght têm os mesmos valores então o meu form vai ficar centralizado dentro do meu card. Ou seja, a distância interna da caixa do meu form contendo: h1, input, form, button.*/
    background: white; /*cor interno do card ou da caixa branca*/
    max-width: 42.8rem ; /*A propriedade max-width do CSS estabelece a largura máxima de um elemento(no caso a caixa branca, o card ou cartão). Ele evita que o conteúdo interno da caixa se torne maior ou ultrapsse a caixa branca. Mesmo que diminue a caixa mais o conteúdo sempre se manterá dentro dela.*/
    margin-inline: auto; /*o card vai ficar ajustado automaticamente entre as laterais do navegador: left e right fazendo com que fique centralizado mesmo quando redimensione o navegador*/
    box-shadow: 10px 5px 5px rgb(239, 153, 153); /*box-shadow ou sombra da caixa, adiciona efeitos de sombra ao redor do quadro de um elemento nesse cado do .card.*/
    border-radius: 0.6rem; /*percorre os cantos da borda externa de um elemento. Aqui estou definindo os 04 cantos arredondados com raio de 0.6rem. Posso definir cantos individuais desde que eu especifique o canto. Ex: border-top-left-radius:*/
     
}

/*-------estilizando os textos do card-----*/

form {
    border: 1px solid red;
    width: 30rem;
    
}
.title {
    font-size: 3.2rem; /* tamanho da fonte*/
    line-height: 4rem; /*altura da linha*/
    color: var(--tt-heading);
}

form h1 {
    
    margin-bottom: 3.2rem; /*margem-iferior e define a área de margem na parte inferior de um elemento.Um valor positivo o coloca mais longe de seus vizinhos, enquanto um valor negativo o aproxima. Nesse caso estamos distânciando a caixa do calculo imc das demais caixas na parte inferior*/
}

form label {
    font-size: 1.4rem;
    line-height: 1.8rem;
    color: var(--tt-label);
    margin-bottom: 0.8rem; /*obs: margin-bottom só funciona em display:block e por padrão vem display:inline que não aceita a configuração de margin-bottom (altura e largura).*/
    display: block; /* gera uma caixa de elemento de bloco(um abaixo do outro, em coluna com a mesma altura e largura), gerando quebras de linha antes e depois do elemento quando no fluxo normal.*/
}

form input {
    width: 100%; /*O width define a largura de um elemento e nesse caso ele jogou os inputs para próxima linha colocando a largura automaticamente no mesmo tamannho pois no .card foi definido um padding de 4.8rem 6.4rem 6.4rem 6.4rem centralizando todo o meu for automaticamente dentro do card*/
    border: 1px solid var(--bd-input);
    background: var(--bg-input);
    padding: 1.6rem; /* padding = preenchimento. Define a área de preenchimento nos quatro lados de um elemento ao mesmo tempo. Ele vai distanciar o conteúdo do input(no caso é um texto) das margens superior, direita, inferior e esquerda da margem do input.*/
    border-radius: 0.4 rem;
}

form input:focus { /*esse focus não contêm no HTML. Ele se refere toda vez que eu clicar dentro do input ele vai estilizar o outline que siginifca esboço. Esse outline vai fazer com que a caixa do input fique com bordas de 2px solid e com a cor da variável que eu define... */
    outline: 2px solid var(--ot-input);

}

form input::placeholder { /* esses :: significa sudoclass*/
    color: var(--tt-placeholder);
}

/*estilizar o input-wrapper que anterior + a ele tenha um outro input-wrapper. Nesse caso ele vai estilizar apenas o segundo input-wrapper do index.html. Essa leitura fazemos da direita para esquerda*/
.input-wrapper + .input-wrapper {
    margin-top: 1.6rem;
}

form button { /*aqui estou pegando apenas o botão contido dentro do form*/
    margin-top: 3.2rem;
    padding: 1.6rem;
    width: 100%; /*essa largura de 100% é para pegar toda a largura da caixa do form que contêm todo o meu fomulário. A largura do meu formulário foi definido automaticamente quando inseri no .card um padding de 4.8rem 6.4rem 6.4rem 6.4rem;*/

    border-radius: 0.4rem;
    border: none;
    background-color: var(--bg-button);
    color: var(--tt-button);

    display: flex; /*alinha horizontamente todo o conteúdo de dentro do button(text e img)*/
    align-items: center; /*alinhamento dos itens(texto e img) sempre ficarão ao centro independente do tamanho da caixa do button*/
    justify-content: center; /*justify-content = justificar conteúdo: centro. Irá centralizar todo o conteúdo interno do button ao centro de sua caixa*/
    gap:0.9rem; /*espçao entre 'Calcular IMC' da 'seta'*/

    font-weight: bold;

    cursor: pointer; /* ao passar o mouse sobre o button o pontei se transforma em uma mão apontando para cima*/      
    transition: background 0.3s; /*permite definir a transição entre dois estados de um elemento. há várias formas de se fazer trnsition nesse caso estou determinando o tempo da mudança de cor do button:hover. OBS: o transition deve ser aplicado no button e não no button:hover */
}
form button:hover { /*ao passar o mouse sobre o button dentro do form ele vai mudar de cor*/
    background: var(--bg-button-hover) ;
}


/*---estilizando o MODAL que é o POPUP após clicar no button*/
.modal-wrapper.open {/*quando o modal-wrapper for open faça:*/
    opacity: 1;
    visibility: visible; /*deixa visível*/
}
.modal-wrapper {
    position: absolute; /*para o modal-wrapper ficar exatamente na posição que foi definido pelo inset abaixo ou seja, inset:0*/
    inset: 0; /*A propriedade CSS inset é uma abreviação que corresponde às propriedades: top, right, bottom,left. Ao invés de colocar: top:0, bottom:0, right:0 e left:0, insira inset:0; */
    background: rgba(0,0,0,0.7); /*esse 0.7 no final do rgba vai definir o nível de transparência*/

    display: grid; /*como só têm um elemento dentro da caixa, utiliza-se o display:grid que vai fazer com que a caixa fique esticada verticalmente até o final da página do navegador e para centralizar usa-se place-content*/
    place-content: center;

    /* definindo o modal-wrapper que é a caixa do resultado do cálculo para não aparecer por padrão, ficar sem visível. Criaremos no HTML uma div modal-wrapper.open e estilizaremos com opacyte:1 e visibility: visible e essa que já está criada modal-wrapper fica com opacite:0 e visibility:hidden*/
    opacity: 0;
    visibility: hidden; /*hidden = escondida*/
}



.modal {
    position: relative; /*esse .modal é o pai do modal-wrapper e por isso ele deve ser relative ao absolute do modal-button*/
}

.modal button {/*estilizando o botão de fechar*/
    background: none; /*retira a cor do fundo do botão de fechar*/    
    border: none;

    position: absolute; /*seu colocar apenas como absolute o botão vai ficar no topo da página e não dentro da caixa modal-wrapper e para poder ficar exatamente posicionado no modal-wrapper precisamos criar .modal com position:relative; */
    top: 1.6rem;
    right: 1.6rem;
    cursor: pointer;
    transition: transform .3s;

}

.modal button:hover {
    transform: scale(1.1); /*o botão de fechar vai ficar maior ao passar o mouse sobre ele*/
}

/* estilizando o <div class="alert-error"> */

.alert-error.open {
    visibility: visible;
    opacity: 1;
    transform: translateY(0);
}

.alert-error {
    position: absolute; /*vai ficar fixo no topo do body*/
    background-color: var(--bg-error);
    top: 0;
    left: 0;
    right: 0;
    text-align: center; /*alinhamento do texto é centro*/
    color: var(--tt-error);
    padding: 0.8rem 0;
    font-weight: bold;

    visibility: hidden;
    opacity: 0;
    transform: translateY(-30px);
    transition: transform .5s;
}

